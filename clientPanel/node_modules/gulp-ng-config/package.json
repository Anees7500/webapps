{
  "_from": "gulp-ng-config",
  "_id": "gulp-ng-config@1.5.0",
  "_inBundle": false,
  "_integrity": "sha1-s4++hBzi0mdOxz2LZdpXXlgsuDE=",
  "_location": "/gulp-ng-config",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "gulp-ng-config",
    "fetchSpec": "latest",
    "name": "gulp-ng-config",
    "raw": "gulp-ng-config",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-ng-config/-/gulp-ng-config-1.5.0.tgz",
  "_shasum": "b38fbe841ce2d2674ec73d8b65da575e582cb831",
  "_spec": "gulp-ng-config",
  "_where": "D:\\fancymonk\\webapps\\clientPanel",
  "author": {
    "name": "Atticus White"
  },
  "bugs": {
    "url": "https://github.com/ajwhite/gulp-ng-config/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "gulp-util": "^3.0.8",
    "js-yaml": "^3.7.0",
    "lodash": "^4.17.3",
    "through2": "^2.0.3"
  },
  "deprecated": false,
  "description": "AngularJS configuration generator for a module of constants",
  "devDependencies": {
    "chai": "^3.5.0",
    "chai-spies": "^0.7.1",
    "event-stream": "^3.3.4",
    "gulp": "^3.9.1",
    "gulp-coveralls": "^0.1.4",
    "gulp-istanbul": "^1.1.1",
    "gulp-jscs": "^4.0.0",
    "gulp-jshint": "^2.0.4",
    "gulp-mocha": "^3.0.1",
    "jshint": "^2.9.4",
    "jshint-stylish": "^2.2.1",
    "mocha": "^3.2.0",
    "vinyl": "^2.0.1"
  },
  "homepage": "https://github.com/ajwhite/gulp-ng-config",
  "keywords": [
    "angular",
    "angularjs",
    "config",
    "constant",
    "grunt",
    "gulp",
    "gulpfriendly",
    "gulpplugin",
    "ng"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "gulp-ng-config",
  "optionalDependencies": {},
  "readme": "# gulp-ng-config\n\n[![License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://npmjs.org/package/gulp-ng-config)\n[![NPM version](http://img.shields.io/npm/v/gulp-ng-config.svg?style=flat)](https://npmjs.org/package/gulp-ng-config)\n[![NPM version](http://img.shields.io/npm/dm/gulp-ng-config.svg?style=flat)](https://npmjs.org/package/gulp-ng-config)\n[![Build Status](http://img.shields.io/travis/ajwhite/gulp-ng-config.svg?style=flat)](http://travis-ci.org/ajwhite/gulp-ng-config)\n[![Coverage Status](https://coveralls.io/repos/ajwhite/gulp-ng-config/badge.svg?branch=develop&service=github)](https://coveralls.io/github/ajwhite/gulp-ng-config?branch=develop)\n[![Code Climate](https://codeclimate.com/github/ajwhite/gulp-ng-config/badges/gpa.svg)](https://codeclimate.com/github/ajwhite/gulp-ng-config)\n[![Dependency Status](http://img.shields.io/gemnasium/ajwhite/gulp-ng-config.svg?style=flat)](https://gemnasium.com/ajwhite/gulp-ng-config)\n\n[![NPM](https://nodei.co/npm/gulp-ng-config.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/gulp-ng-config/)\n\nIt's often useful to generate a file of constants, usually as environment variables, for your Angular apps.\nThis Gulp plugin will allow you to provide an object of properties and will generate an Angular module of constants.\n\n## To Install:\n`npm install gulp-ng-config`\n\n## How it works\nIt's pretty simple:\n`gulpNgConfig(moduleName)`\n\n\n## Example Usage\nWe start with our task. Our source file is a JSON file containing our configuration. We will pipe this through `gulpNgConfig` and out will come an angular module of constants.\n```javascript\nvar gulp = require('gulp');\nvar gulpNgConfig = require('gulp-ng-config');\n\ngulp.task('test', function () {\n  gulp.src('configFile.json')\n  .pipe(gulpNgConfig('myApp.config'))\n  .pipe(gulp.dest('.'))\n});\n```\nAssume that `configFile.json` contains:\n```json\n{\n  \"string\": \"my string\",\n  \"integer\": 12345,\n  \"object\": {\"one\": 2, \"three\": [\"four\"]},\n  \"array\": [\"one\", 2, {\"three\": \"four\"}, [5, \"six\"]]\n}\n```\nRunning `gulp test` will take `configFile.json` and produce `configFile.js` with the following content:\n\n```js\nangular.module('myApp.config', [])\n.constant('string', \"my string\")\n.constant('integer', 12345)\n.constant('object', {\"one\":2,\"three\":[\"four\"]})\n.constant('array', [\"one\",2,{\"three\":\"four\"},[5,\"six\"]]);\n```\nWe now can include this configuration module in our main app and access the constants\n```js\nangular.module('myApp', ['myApp.config']).run(function (string) {\n  console.log(\"The string constant!\", string) // outputs \"my string\"\n});\n```\n\n\n## Configuration\nCurrently there are a few configurable options to control the output of your configuration file:\n- [options.environment](#options.environment)\n- [options.constants](#options.constants)\n- [options.createModule](#options.createModule)\n- [options.type](#options.type)\n- [options.wrap](#options.wrap)\n- [options.parser](#options.parser)\n- [options.pretty](#options.pretty)\n- [options.keys](#options.keys),\n- [options.templateFilePath](#options.templateFilePath)\n\n### <a id=\"options.environment\"></a>options.environment\nType: `String` Optional\n\nIf your configuration contains multiple environments, you can supply the key you want the plugin to load from your configuration file.\n\nExample `config.json` file with multiple environments:\n```json\n{\n  \"local\": {\n    \"EnvironmentConfig\": {\n      \"api\": \"http://localhost/\"\n    }\n  },\n  \"production\": {\n    \"EnvironmentConfig\": {\n      \"api\": \"https://api.production.com/\"\n    }\n  }\n}\n```\n\nUsage of the plugin:\n```js\ngulpNgConfig('myApp.config', {\n  environment: 'production'\n})\n```\n\nExpected output:\n```js\nangular.module('myApp.config', [])\n.constant('EnvironmentConfig', {\"api\": \"https://api.production.com/\"});\n```\n\n#### Nested Environment\nIf the configuration is nested it can be accessed by the namespace, for example\n```json\n{\n  \"version\": \"0.1.0\",\n  \"env\": {\n    \"local\": {\n      \"EnvironmentConfig\": {\n        \"api\": \"http://localhost/\"\n      }\n    },\n    \"production\": {\n      \"EnvironmentConfig\": {\n        \"api\": \"https://api.production.com/\"\n      }\n    }\n  }\n}\n```\n\nUsage of the plugin:\n```js\ngulpNgConfig('myApp.config', {\n  environment: 'env.production'\n})\n```\n\nExpected output:\n```js\nangular.module('myApp.config', [])\n.constant('EnvironmentConfig', {\"api\": \"https://api.production.com/\"});\n```\n\n#### Multiple Environment keys\nMultiple environment keys can be supplied in an array, for example for global and environmental constants\n```json\n{\n  \"global\": {\n    \"version\": \"0.1.0\"\n   },\n  \"env\": {\n    \"local\": {\n      \"EnvironmentConfig\": {\n        \"api\": \"http://localhost/\"\n      }\n    },\n    \"production\": {\n      \"EnvironmentConfig\": {\n        \"api\": \"https://api.production.com/\"\n      }\n    }\n  }\n}\n```\n\nUsage of the plugin:\n```js\ngulpNgConfig('myApp.config', {\n  environment: ['env.production', 'global']\n})\n```\n\nExpected output:\n```js\nangular.module('myApp.config', [])\n.constant('EnvironmentConfig', {\"api\": \"https://api.production.com/\"});\n.constant('version', '0.1.0');\n```\n\n### <a id=\"options.constants\"></a>options.constants\nType: `Object` Optional\n\nYou can also override properties from your json file or add more by including them in the gulp tasks:\n```javascript\ngulpNgConfig('myApp.config', {\n  constants: {\n    string: 'overridden',\n    random: 'value'\n  }\n});\n```\nGenerating `configFile.js`\n```js\nangular.module('myApp.config', [])\n.constant('string', \"overridden\")\n.constant('integer', 12345)\n.constant('object', {\"one\":2,\"three\":[\"four\"]})\n.constant('array', [\"one\",2,{\"three\":\"four\"},[5,\"six\"]])\n.constant('random', \"value\");\n\n```\n\n### <a id=\"options.type\"></a>options.type\nType: `String` Default value: `'constant'` Optional\n\nThis allows configuring the type of service that is created -- a `constant` or a `value`. By default, a `constant` is created, but a `value` can be overridden. Possible types:\n\n- `'constant'`\n- `'value'`\n\n```javascript\ngulpNgConfig('myApp.config', {\n  type: 'value'\n});\n```\n\nThis will produce `configFile.js` with a `value` service.\n```javascript\nangular.module('myApp.config', [])\n.value('..', '..');\n```\n\n### <a id=\"options.createModule\"></a>options.createModule\nType: `Boolean` Default value: `true` Optional\n\nBy default, a new module is created with the name supplied. You can access an existing module, rather than creating one, by setting `createModule` to false.\n```javascript\ngulpNgConfig('myApp.config', {\n  createModule: false\n});\n```\n\nThis will produce `configFile.js` with an existing angular module\n```javascript\nangular.module('myApp.config')\n.constant('..', '..');\n```\n\n### <a id=\"options.wrap\"></a>options.wrap\nType: `Boolean` or `String` Default value: `false` Optional\n\nPresets:\n- `ES6`\n- `ES2015`\n\nWrap the configuration module in an IIFE or your own wrapper.\n\n```js\ngulpNgConfig('myApp.config', {\n  wrap: true\n})\n```\n\nWill produce an IIFE wrapper for your configuration module:\n```javascript\n(function () {\n  return angular.module('myApp.config') // [] has been removed\n  .constant('..', '..');\n})();\n```\n\nYou can provide a custom wrapper. Provide any string you want, just make sure to include `<%= module %>` for where you want to embed the angular module.\n```js\ngulpNgConfig('myApp.config', {\n  wrap: 'define([\"angular\"], function () {\\n return <%= module %> \\n});'\n});\n```\n\nThe reuslting file will contain:\n```js\ndefine([\"angular\"], function () {\n return angular.module('myApp.config', [])\n.constant('..', '..');\n});\n```\n\n### <a id=\"options.parser\"></a>options.parser\nType: `String` Default value: 'json' Optional\n\nBy default, json file is used to generate the module. You can provide yml file to generate the module. Just set `parser` to `'yml'` or `'yaml'`. If your file type is yml and you have not defined `parser`, your file will still be parsed and js be generated correctly.\nFor example, you have a `config.yml` file,\n```yml\nstring: my string\ninteger: 12345\nobject:\n  one: 2\n  three:\n    - four\n```\n\n```javascript\ngulp.src(\"config.yml\")\n.pipe(gulpNgConfig('myApp.config', {\n  parser: 'yml'\n}));\n```\n\nGenerating,\n```js\nangular.module('myApp.config', [])\n.constant('string', \"my string\")\n.constant('integer', 12345)\n.constant('object', {\"one\":2,\"three\":[\"four\"]});\n```\n\n### <a id=\"options.pretty\"></a>options.pretty\nType: `Number|Boolean` Default value: `false` Optional\n\nThis allows `JSON.stringify` to produce a `pretty` formatted output string.\n\n```js\ngulp.src('config.json')\n.pipe(gulpNgConfig('myApp.config', {\n  pretty: true // or 2, 4, etc -- all representing the number of spaces to indent\n}));\n```\n\nWill output a formatted `JSON` object in the constants, instead of inline.\n```js\nangular.module(\"gulp-ng-config\", [])\n.constant(\"one\", {\n  \"two\": \"three\"\n});\n```\n\n### <a id=\"options.keys\"></a>options.keys\nType: `Array` Optional\n\nIf you only want some of the keys from the object imported, you can supply the keys you want the plugin to load.\n\nExample `config.json` file with unwanted keys:\n```json\n{\n  \"version\": \"0.0.1\",\n  \"wanted key\": \"wanted value\",\n  \"unwanted key\": \"unwanted value\"\n}\n```\n\nUsage of the plugin:\n```js\ngulpNgConfig(\"myApp.config\", {\n  keys: [\"version\", \"wanted key\"]\n})\n```\n\nExpected output:\n```js\nangular.module(\"myApp.config\", [])\n.constant(\"version\", \"0.0.1\")\n.constant(\"wanted key\", \"wanted value\");\n```\n\n### <a id=\"options.templateFilePath\"></a>options.templateFilePath\nType: `String` Optional\n\nThis allows the developer to provide a custom output template.\n\nSample template:\n`angularConfigTemplate.html`\n```html\nvar foo = 'bar';\n\nangular.module(\"<%= moduleName %>\"<% if (createModule) { %>, []<% } %>)<% _.forEach(constants, function (constant) { %>\n.<%= type %>(\"<%= constant.name %>\", <%= constant.value %>)<% }); %>;\n```\n\nConfiguration:\n```json\n{\n  \"Foo\": \"bar\"\n}\n```\n\nGulp task:\n```js\ngulp.src('config.json')\n.pipe(gulpNgConfig('myApp.config', {\n  templateFilePath: path.normalize(path.join(__dirname, 'templateFilePath.html'))\n}));\n```\n\nSample output:\n```js\nvar foo = 'bar';\n\nangular.module('myApp.config', [])\n.constant('Foo', 'bar');\n```\n\n## Additional Usages\n\n### Without a json/yaml file on disk\nUse `buffer-to-vinyl` to create and stream a vinyl file into `gulp-ng-config`. Now config values can come from environment variables, command-line arguments or anywhere else.\n\n```js\nvar b2v = require('buffer-to-vinyl');\nvar gulpNgConfig = require('gulp-ng-config');\n\ngulp.task('make-config', function() {\n  var json = JSON.stringify({\n    // your config here\n  });\n\n  return b2v.stream(new Buffer(json), 'config.js')\n    .pipe(gulpNgConfig('myApp.config'))\n    .pipe(gulp.dest('build'));\n});\n```\n\n### ES6/ES2015\nAn ES6/ES2015 template can be generated by passing `wrap: true` as a configuration to the plugin\n\n## Contributing\nContributions, issues, suggestions, and all other remarks are welcomed. To run locally just fork &amp; clone the project and run `npm install`. Before submitting a Pull Request, make sure that your changes pass `gulp test`, and if you are introducing or changing a feature, that you add/update any tests involved.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ajwhite/gulp-ng-config.git"
  },
  "scripts": {
    "test": "gulp test"
  },
  "version": "1.5.0"
}
